{% extends 'base.html.twig' %}

{% block body %}
    <section class="filtres">
        <form class="form-horizontal" role="search">
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group barre">
                        <input type="text" class="form-control form-listener" placeholder="Rechercher" id="rechercher">
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-7">
                    <label for="loyer_input">Loyer</label><input type="text" id="loyer_input" name="loyer_input" value="" /><br><br>
                    <label for="surface_input">Surface</label><input type="text" id="surface_input" name="surface_input" value="" />
                    <label for="piece_input">Nombre de pièce(s) minimum</label><input type="number" class="form-control form-listener" id="piece_input" name="piece_input" value="1" />
                    <input type="radio" class="form-control form-listener" name="type_proprietaire_input" value="" checked/> Les deux<br>
                    <input type="radio" class="form-control form-listener" name="type_proprietaire_input" value="Professionnel"/> Professionnel<br>
                    <input type="radio" class="form-control form-listener" name="type_proprietaire_input" value="Particulier"/> Particulier<br>
                </div>

                <div class="col-md-5">
                    <div id="map"></div>
                </div>
            </div>
        </form>
    </section>
    <section class="resultats">
        <div class="resultats row">
            {% for annonce in annonces %}
                <div class="resultat col-md-4 col-sm-6 col-xs-12" data-nom="{{ annonce.nom }}" data-loyer="{{ annonce.loyer }}" data-surface="{{ annonce.surface }}" data-nombre-pieces="{{ annonce.nombrePieces }}" data-type-proprietaire="{{ annonce.typeProprietaire }}">
                    <a href="{{ path('annonce', {id: annonce.id}) }}">
                        <div class="img">
                          {% if annonce.images is not empty %}
                          <img src="{{ asset(annonce.images[0].getWebPath) }}" alt="img">
                          {% endif %}
                        </div>
                        <h4>{{ annonce.nom }} <small>{{ annonce.surface }} m²</small></h4>
                        <b class="prix" title="Prix par mois">{{ annonce.loyer }} €</b>
                        <i class="nb-images">{{ annonce.images.count() }} image{{ (annonce.images.count() > 1 ? 's' : '') }}</i>
                    </a>
                </div>
            {%  endfor %}
        </div>
    </section>
{% endblock %}


{% block javascripts %}
<script>

  var fromLoyer = 100, toLoyer = 900, fromSurface = 0, toSurface = 200
  var markers = []
  var map

  function filter() {
    var rechercher = $('#rechercher').val()
    var nombrePieces = $('#piece_input').val()
    var typeProprietaire = $('input[name=type_proprietaire_input]:checked').val()
    $('.resultat').each(function(){
      var resultat = $(this)
      var ok = false
      // on check les champs
      // champs recherche
      if(rechercher === ''){
        ok = true
      }
      else if(resultat.attr('data-nom').indexOf(rechercher) !== -1){
        ok = true
      }

      // slider loyer
      if(ok){
        var loyer = resultat.attr('data-loyer')
        if(loyer >= fromLoyer && loyer <= toLoyer) ok = true
        else ok = false
      }

      // slider surface
      if(ok){
        var surface = resultat.attr('data-surface')
        if(surface >= fromSurface && surface <= toSurface) ok = true
        else ok = false
      }

      // nombre de piece min
      if(ok){
        if(resultat.attr('data-nombre-pieces') >= nombrePieces) ok = true
        else ok = false
      }

      // type proprio
      if(ok){
        if(!typeProprietaire || typeProprietaire === resultat.attr('data-type-proprietaire')) ok = true
        else ok = false
      }

      // on affiche ou non
      ok ? resultat.show() : resultat.hide()
      // google map
      if(markers.length != 0){
        var index = resultat.attr('data-marker-key')
        if(index) ok ? markers[index].setMap(map) : markers[index].setMap(null)
      }
    })
  }

  $('#loyer_input').ionRangeSlider({
      type: 'double',
      grid: true,
      min: 0,
      max: 1000,
      from: fromLoyer,
      to: toLoyer,
      postfix: ' €',
      //onChange: function (data) {},
      onFinish: function (data) {
        fromLoyer = data.from
        toLoyer = data.to
        filter()
      }
  })

  $('#surface_input').ionRangeSlider({
      type: 'double',
      grid: true,
      min: 0,
      max: 200,
      from: fromSurface,
      to: toSurface,
      postfix: ' m²',
      //onChange: function (data) {},
      onFinish: function (data) {
        fromSurface = data.from
        toSurface = data.to
        filter()
      }
  })


  $('.form-listener').on('change paste keyup', function(){
    filter()
  })

  function initMap() {
    // init de la map
    map = new google.maps.Map(document.getElementById('map'), {
      zoom: 13,
      scrollwheel: false,
      center: {lat: 48.400, lng: -4.483}
    })
    // recup du geocoder
    var geocoder = new google.maps.Geocoder()
    // recup des images
    var markerIsen = {
      url: '{{ asset('images/marker-isen.png') }}',
      size: new google.maps.Size(140, 70),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(61, 31)
    }

    var markerAutre = {
      url: '{{ asset('images/marker-map.png') }}',
      size: new google.maps.Size(42, 25),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(42, 25)
    }

    function addMarkerByAdress(adress, title, link, key){
      // on recupère la geoloc via l'adresse
      geocoder.geocode({ 'address': adress}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          var marker = new google.maps.Marker({
              map: map,
              position: results[0].geometry.location,
              label: {text: title, color: 'white'},
              title: title,
              icon: markerIsen
          })
          if(link !== null){
            marker.icon = markerAutre;
            marker.addListener('click', function() {
              window.location.href = link
            })
            $('.resultat:nth('+key+')').attr('data-marker-key', markers.length)
            markers.push(marker)
          }else{
            map.setCenter(results[0].geometry.location)
          }
        }
      })
    }
    // ajout du marker de l'isen
    addMarkerByAdress('{{ adresse_isen }}', ' ', null, null)
    // ajout des marker de logement
    {% for key,annonce in annonces %}
    addMarkerByAdress('{{ annonce.adresse }} {{ annonce.ville }} {{ annonce.codePostal }}', '{{ annonce.loyer }}€', '{{ path('annonce', {id: annonce.id}) }}', {{ key }})
    {% endfor %}
    filter()
  }
</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key={{ google_api_key }}&callback=initMap"></script>
{% endblock %}
